#!/bin/sh
#
#  Define PostgreSQL environment variables for ease of work
#
#  NOT: You must run this script as ". pgenv" to export environment due to shell nature

#  -- Defaults --
_TAB=/etc/pgtab
[ -t 1 ] && _TERM=YES

# This functions extracts config values from PG files
# Expects file and item names
# 1. `tac` prints lines from all the files in reverse order, so put most weighted files at the end
# 2. sed filters for first line with the desired config (note the final `q`)
# 3. remove the trailing comment
# 4. get stuff after the `=` sign, getting rid of possible quotes
# 5. final `q` implies only first match is processed
__get_conf_val()
{
    tac ${1} ${1%.conf}.auto.conf | sed -nr '/^\s*'$2'/{s/\s*#.*$//;s/[^=]*=\s*'\''?(.*)'\''?/\1/p;q}'
}

# {{{  -- Arguments --
while [ "$#" -gt 0 ]; do case "$1" in
    "-d")   #  -- Debuggin info --
        _TRACE=YES ;;
    "-i")   #  -- Current target --
        set|grep ^PG
        set +o xtrace
        return 0 ;;
    "-q")   #  -- Quiet --
        unset _TERM ;;
    "-h")   #  -- Help message --
        echo "${0##*/} [-d] [-h] [-i] [-q] [-p]"
        echo "  -h\thelp message"
        echo "  -d\tdebug execution (noisy)"
        echo "  -i\tinformation bout environment"
        echo "  -q\toperate quietly"
        return 0 ;;
    esac
    shift
done
#  Enable tracing if asked for
[ "${_TRACE:-}" = "YES" ] && set -o xtrace
unset _TRACE
# }}}
# {{{  -- Check the environment --
OLD_BASE=${PG_BASE:-}
OLD_HOME=${PG_HOME:-}
PG_OLD=${PG_ID:-}
unset PG_MASTER PG_VERSION PG_WAL PG_LOG PG_ARCH
# }}}
# {{{  -- Get list of targets --
#
#  Defaults to the only one around, if this is the case
if [ "${SHELL##*/}" = "ksh" ]; then
    set -A _TARGETS $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 )
else
    _TARGETS=( $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 ) )
fi
case ${#_TARGETS[*]} in
    0)  [ ${_TERM:-} = "YES" ] && echo "Nothing mentioned in ${_TAB}"
       unset _TARGETS _TAB _TERM OLD_BASE OLD_HOME PG_OLD
       set +o xtrace
       return 1 ;;
    1)  PG_ID=${_TARGETS[0]} ;;
esac
# }}}
# {{{  -- Pick target
if [ ${_TERM:-} = "YES" ]; then
    : Choosing target
    if [ ${#_TARGETS[*]} -gt 1 ]; then
        i=1
        echo "Choose [1..${#_TARGETS[*]}] or name: "
        for id in ${_TARGETS[*]}; do
            printf " %2d - %s\n" $i $id
            (( i=i+1 ))
        done
        [ "x${PG_ID:-""}" = "x" ] && PG_ID=${_TARGETS[0]}

        printf "Cluster = [$PG_ID] ? "
        read PG_NEW
        [ -z $( echo $PG_NEW | sed -e 's/[0-9]//g' ) ] && [ ! "x$PG_NEW" = "x" ] && PG_NEW=${_TARGETS[$PG_NEW-1]}
    fi
    #  -- Check input
    case "${PG_NEW:-""}" in
      "") ;;
      *) PG_ID=${PG_NEW} ;;
    esac
fi
unset PG_NEW _TARGETS
# }}}
# {{{  -- PG_ID can be empty here in case `-q` switch was used
if [ "x${PG_ID}" = "x" ]; then
    [ ${_TERM:-} = "YES" ] && echo "Empty PG_ID specified"
    unset _TAB _TERM OLD_BASE OLD_HOME PG_OLD PG_ID
    set +o xtrace
    return 1
fi
# }}}
# {{{  -- Locate and set new target
PG_HOME=$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f2 )
if [ ! -x $PG_HOME/bin/psql ]; then
    PG_ID=$PG_OLD
    [ ${_TERM:-} = "YES" ] && echo "Incomplete Postgres distribution"
    unset _TAB _TERM OLD_BASE OLD_HOME PG_OLD PG_HOME
    set +o xtrace
    return 1
fi
PG_BASE=$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f3 )
[ "x${PG_BASE}" = "x" ] && PG_BASE=$( grep ${USER} /etc/passwd | cut -d: -f6 )

# Setting up configfile
_C=$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f4 )
for _F in ${PG_BASE}/$_C $( grep ${USER} /etc/passwd | cut -d: -f6 )/$_C; do
  [ -d $_F -a -r $_F ] && _F=$_F/postgresql.conf
  if [ -f $_F ]; then
    PG_CONF=$_F
    break
  fi
done
unset _C _F
if [ "x{$PG_CONF:-}" = "x" ] || [ ! -r ${PG_CONF} ]; then
    PG_ID=$PG_OLD
    [ ${_TERM:-} = "YES" ] && echo "Cannot deal with specified config"
    unset _TAB _TERM OLD_BASE OLD_HOME PG_OLD PG_HOME PG_BASE PG_CONF
    set +o xtrace
    return 1
fi

: Locating PGDATA
_D=$( __get_conf_val ${PG_CONF} data_directory )
[ "x${_D}" = "x" ] && _D=${PG_CONF%/*}
PG_DATA=$_D; unset _D

PG_CONNINFO="$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f5 )"
PG_MASTER=$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f6 )
PG_ADMINS=$( grep "^$PG_ID:" "${_TAB}" | cut -d: -f7 )
# {{{  Display a hint for the Standby
if [ "x${PG_MASTER}" = "x" ]; then
    PG_TITLE="${PG_ID}@$( uname -n | gawk -F. '{print $1}' )"
else
    PG_TITLE="Standby for ${PG_MASTER}"

    if [ "${_TERM:-""}" = "YES" ]; then
        echo
        echo
        echo "#  ----   S T A N D B Y   F A I L O V E R   ----"
        echo
        echo "To activate Standby, use any of the following:"
        echo "1) pg_ctl promote"
        echo "2) touch ${PG_BASE}/tmp/activate_${PG_ID}"
        echo
    fi
fi
# }}}
PG_AUTOSTART=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f8 )

export PG_ID=${PG_ID}
export PGDATA=${PG_DATA}
export PG_DATA=${PG_DATA}
PG_LOG=${PG_BASE}/log/${PG_ID}
PG_WAL=${PG_BASE}/wal/${PG_ID}
PG_ARCH=${PG_BASE}/arch/${PG_ID}
if [ ! -s $PG_DATA/postgresql.conf ]; then
    unset PGPORT
else
    PGPORT=$( grep "^#*port" $PG_DATA/postgresql.conf | sed -e 's/^#*//' -e 's/#.*$//' | gawk -F= '{gsub(/[ \t]/, "", $2); print $2}' )
fi
PG_VERSION=$( $PG_HOME/bin/initdb --version | gawk '{ print $NF}' )
PG_MAJOR=$( echo ${PG_VERSION} | sed -e 's/\(\.[^.]*\)\..*$/\1/' )

PGDATA=${PG_DATA}
# }}}
# {{{  -- Put new PG_ID into PATH and reset other vars --
PG_BIN="${PG_HOME}/bin"
if [ -d "${PG_BIN}" ]; then
    case "$PATH" in
      *${OLD_HOME}/bin*) PATH=`echo ${PATH} | sed "s;${OLD_HOME}/bin;${PG_BIN};g"` ;;
      *${PG_BIN}*) ;;
      *:) PATH=${PATH}${PG_BIN} ;;
      "") PATH=${PG_BIN} ;;
      *) PATH=${PATH}:${PG_BIN} ;;
    esac
fi
# }}}
unset PG_HOME PG_BIN _TAB _TERM PG_OLD
set +o xtrace

#
# vim:ts=4 et sw=4 ai
#
