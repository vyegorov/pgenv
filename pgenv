#!/bin/sh
#
#  Define PostgreSQL environment variables for ease of work
#
#  NOT: You must run this script as ". pgenv" to export environment due to shell nature

#  -- Defaults --
_TAB=/etc/pgtab
[ -t 1 ] && _TERM=1 || _TERM=0

# This functions extracts config values from PG files {{{
# Expects file and item names
# 1. `tac` prints lines from all the files in reverse order, so put most weighted files at the end
# 2. sed filters for first line with the desired config (note the final `q`)
# 3. remove the trailing comment
# 4. get stuff after the `=` sign, getting rid of possible quotes
# 5. final `q` ensures only first match is processed
__get_conf_val()
{
    tac ${1} | sed -nr '/^\s*'$2'/{s/\s*#.*$//;s/[^=]*=\s*(["'\'']?)(.*)\1/\2/p;q}'
} # }}}
# Quit the script {{{
__exit()
{
  set +o xtrace
  [ $_TERM -eq 1 -a ! -z "$2" ] && echo "echo \"$2\";"
  unset _TAB _TERM _TARGETS _NEW _ID _ARR

  if [ "${SHELL##*/}" = "ksh" ]; then
    [ ${.sh.level} -eq 1 ] && echo "exit $1" && return
  else
    [ $0 = $BASH_SOURCE ] && echo "exit $1" && return
  fi
  echo "return $1"
} # }}}

# {{{  -- Arguments --
while [ "$#" -gt 0 ]; do case "$1" in
    "-d")   #  -- Debuggin info --
        _TRACE=YES ;;
    "-i")   #  -- Current target --
        set|grep ^PG
        eval $( __exit 0 ) ;;
    "-q")   #  -- Quiet --
        _TERM=0 ;;
    "-h")   #  -- Help message --
        echo "${0##*/} [-d] [-h] [-i] [-q] [-p]"
        echo "  -h\thelp message"
        echo "  -d\tdebug execution (noisy)"
        echo "  -i\tinformation bout environment"
        echo "  -q\toperate quietly"
        eval $( __exit 0 ) ;;
    esac
    shift
done
#  Enable tracing if asked for
[ "${_TRACE:-}" = "YES" ] && set -o xtrace
unset _TRACE
# }}}
# {{{  -- Get list of targets --
#
#  Defaults to the only one around, if this is the case
if [ "${SHELL##*/}" = "ksh" ]; then
    set -A _TARGETS $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 )
else
    _TARGETS=( $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 ) )
fi
case ${#_TARGETS[*]} in
    0)  eval $( __exit 1 "No targets mentioned in \`${_TAB}\`" ) ;;
    1)  _ID=${_TARGETS[0]} ;;
esac
# }}}
# {{{  -- Pick target
if [ $_TERM -eq 1 ]; then
    : Choosing target
    if [ ${#_TARGETS[*]} -gt 1 ]; then
        i=1
        echo "Choose [1..${#_TARGETS[*]}] or name: "
        for id in ${_TARGETS[*]}; do
            printf " %2d - %s\n" $i $id
            (( i=i+1 ))
        done
        [ -z ${PG_ID+-} ] && _ID=${_TARGETS[0]} || _ID=${PG_ID}

        printf "Cluster = [${_ID}] ? "
        read _NEW
    fi
    case "${_NEW:-}" in
      '') ;;
      *[!0-9]*) _ID=${_NEW} ;;
      *) _ID=${_TARGETS[$_NEW-1]} ;;
    esac
fi
unset _NEW _TARGETS
[ -z ${_ID+-} ] && eval $( __exit 1 "Empty PG_ID specified" )
# }}}
OFS=$IFS
if [ "${SHELL##*/}" = "ksh" ]; then
  IFS=: set -A _ARR $( grep "^$_ID:" "${_TAB}" )
else
  IFS=: _ARR=( $( grep "^$_ID:" "${_TAB}" ) )
fi
IFS=$OFS

# {{{  -- Setup target
[ ! -x ${_ARR[1]}/bin/psql ] && eval $( __exit 1 "Incomplete Postgres distribution: ${_ARR[1]}" )
[ -z ${_ARR[2]} ] && _ARR[2]=$( grep ${USER} /etc/passwd | cut -d: -f6 )

# Configfile
if [ ! -z ${_ARR[3]} ]; then
  for _F in ${PG_BASE}/${_ARR[3]} $( grep ${USER} /etc/passwd | cut -d: -f6 )/${_ARR[3]}; do
    [ -d $_F -a -r $_F ] && _F=$_F/postgresql.conf
    if [ -f $_F ]; then
      _ARR[10]=$_F
      break
    fi
  done; unset _F
  [ -z ${_ARR[10]+-} ] || [ ! -r ${_ARR[10]} ] && eval $( __exit 1 "Cannot deal with config: ${_ARR[3]}" )

  # Locating PGDATA
  _ARR[11]=$( __get_conf_val ${_ARR[10]} data_directory )
  [ -z "${_ARR[11]}" ] && _ARR[11]=${_ARR[10]%/*}

  # Add `ALTER SYSTEM` file, if exists
  _ARR[12]=${_ARR[10]}
  [ -f ${_ARR[11]}/postgresql.auto.conf ] && _ARR[12]="${_ARR[12]} ${_ARR[11]}/postgresql.auto.conf"
else
  eval $( __exit 1 "Specify PostgreSQL config file for \`$_ARR[0]\`" )
fi
# }}}

# At this point all checks are over, so output and exports are fine
if [ -s ${_ARR[11]}/recovery.conf ]; then
  if [ ${_TERM} -eq 1 ]; then
    _T=$( __get_conf_val ${_ARR[11]}/recovery.conf trigger_file )
    echo
    echo
    echo "#  ----   S T A N D B Y   F A I L O V E R   ----"
    echo
    echo "To activate Standby, use any of the following:"
    echo "* pg_ctl promote"
    [ ! -z ${_T} ] && echo "* touch ${_T}"
    echo
    echo
  fi
  PG_PROMPT="${_ARR[0]} (standby)"
else
  PG_PROMPT=${_ARR[0]}
fi
export PG_PROMPT

export PG_ID=${_ARR[0]}
export PG_HOME=${_ARR[1]}
export PG_BASE=${_ARR[2]}
[ ! -z ${_ARR[4]} ] && export PG_CONNINFO=${_ARR[4]} || unset PG_CONNINFO
[ ! -z ${_ARR[5]} ] && export PG_ADMINS=${_ARR[5]} || unset PG_ADMINS
[ ! -z ${_ARR[10]} ] && export PG_CONF=${_ARR[10]} || unset PG_CONF
[ ! -z ${_ARR[11]} ] && export PGDATA=${_ARR[11]} || unset PGDATA
# Special handling for PGPORT required, as compiled-in defaults
# can differ for manually compiled sources. In such cases
# port remains commented in the supplied during init `postgresql.conf`.
# Accessing such instances via binaries from other supplier can lead to
# unexpected messages.
[ ! -z ${_ARR[11]} ] && export PGPORT=$( tac ${_ARR[12]} | sed -nr '/^[\s#]*port/{s/\s*#[^#]*$//;s/[^=]*=\s*(["'\'']?)(.*)\1/\2/p;q}' ); [ -z $PGPORT ] && unset PGPORT

# {{{  -- Put new PG_ID into PATH and reset other vars --
OLD_HOME=${PG_HOME:-}
PG_BIN="${_ARR[1]}/bin"
if [ -d "${PG_BIN}" ]; then
    case "$PATH" in
      *${OLD_HOME}/bin*) PATH=`echo ${PATH} | sed "s;${OLD_HOME}/bin;${PG_BIN};g"` ;;
      *${PG_BIN}*) ;;
      *:) PATH=${PATH}${PG_BIN} ;;
      "") PATH=${PG_BIN} ;;
      *) PATH=${PATH}:${PG_BIN} ;;
    esac
fi
unset PG_BIN OLD_HOME
# }}}

eval $( __exit 0 )

# vim:ts=4 sw=4 et ai fen fdm=marker
#
