#!/bin/sh
#
#  Define PostgreSQL environment variables for ease of work
#
#  NOT: You must run this script as ". pgenv" to export environment due to shell nature

#  -- Defaults --
_TAB=/etc/pgtab
_TERM=NO
_TRACE=NO
[ -t 1 ] && _TERM=YES
_USER=${USER}

# This functions extracts config values from PG files
# Expects file and item names
# 1. `tac` prints lines from all the files in reverse order, so put most weighted files at the end
# 2. sed filters for first line with the desired config (note the final `q`)
# 3. remove the trailing comment
# 4. get stuff after the `=` sign, getting rid of possible quotes
# 5. final `q` implies only first match is processed
__get_conf_val()
{
    tac ${1} ${1%.conf}.auto.conf | sed -nr '/^\s*'$2'/{s/\s*#.*$//;s/[^=]*=\s*'\''?(.*)'\''?/\1/p;q}'
}

# {{{  -- Arguments --
while [ "$#" -gt 0 ]; do case "$1" in
    "-d")   #  -- Debuggin info --
        _TRACE=YES ;;
    "-i")   #  -- Current target --
        set|grep ^PG
        set +o xtrace
        return 0 ;;
    "-q")   #  -- Quiet --
        _TERM=NO ;;
    "-p")   #  -- Postgres is the owner --
        _USER=postgres ;;
    "-h")   #  -- Help message --
        echo "${0##*/} [-d] [-h] [-i] [-q] [-p]"
        echo "  -h\thelp message"
        echo "  -d\tdebug execution (noisy)"
        echo "  -i\tinformation bout environment"
        echo "  -q\toperate quietly"
        echo "  -p\trelate all paths to the \`postgres\` user, not current one"
        return 0 ;;
    esac
    shift
done
#  Enable tracing if asked for
[ "${_TRACE}" = "YES" ] && set -o xtrace
# }}}
# {{{  -- Check the environment --
: Saving previous values
PG_OLD_BASE=${PG_BASE:-}
PG_OLD_HOME=${PG_HOME:-}
PG_OLD=${PG_ID:-}
PG_HOST=$(uname -n|gawk -F. '{print $1}')
unset PGENV PG_MASTER PG_VERSION PG_WAL PG_LOG PG_ARCH
# }}}
# {{{  -- Get list of targets --
#
#  Defaults to the only one around, if this is the case
: Get list of targets
if [ "${SHELL##*/}" = "ksh" ]; then
    set -A _TARGETS $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 )
else
    _TARGETS=( $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | cut -d: -f1 ) )
fi
case ${#_TARGETS[*]} in
    0)  [ ${_TERM} = "YES" ] && echo "Nothing mentioned in ${_TAB}"
       set +o xtrace
       return 1 ;;
    1)  PG_ID=${_TARGETS[0]} ;;
esac
# }}}
# {{{  -- From here on all variables are exported --
# XXX: Don't think this is a good idea any longer
set -o allexport
if [ "${_TERM:-""}" = "YES" ]; then
    : Choosing target
    if [ ${#_TARGETS[*]} -gt 1 ]; then
        i=1
        echo "Choose [1..${#_TARGETS[*]}] or name: "
        for id in ${_TARGETS[*]}; do
            printf " %2d - %s\n" $i $id
            (( i=i+1 ))
        done
        [ "x${PG_ID:-""}" = "x" ] && PG_ID=${_TARGETS[0]}

        printf "Cluster = [$PG_ID] ? "
        read PG_NEW
        [ -z $( echo $PG_NEW | sed -e 's/[0-9]//g' ) ] && [ ! "x$PG_NEW" = "x" ] && PG_NEW=${_TARGETS[$PG_NEW-1]}
    fi
    #  -- Check input
    case "${PG_NEW:-""}" in
      "") ;;
      *) PG_ID=${PG_NEW} ;;
    esac
fi
# }}}
# {{{  -- PG_ID can be empty here in case `-q` switch was used
# XXX: Should anyhting be unset here?
if [ "x${PG_ID}" = "x" ]; then
    set +o xtrace
    return 1
fi
# }}}
# {{{  -- Locate and set new target
: Locating binaries for new target $PG_ID
PG_HOME=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f2 )
if [ ! -x $PG_HOME/bin/psql ]; then
    PG_ID=$PG_OLD
    [ ${_TERM} = "YES" ] && echo "Incomplete Postgres distribution"
    unset PG_HOME PG_OLD PG_OLD_BASE PG_OLD_HOME _TERM _TRACE
    set +o xtrace
    return 1
fi
PG_BASE=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f3 )
[ "x${PG_BASE}" = "x" ] && PG_BASE=$( grep ${USER} /etc/passwd | cut -d: -f6 )
: Setting up configfile
_C=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f4 )
PG_CONF=${PG_BASE}/$_C
[ -f ${PG_CONF} -a -r ${PG_CONF} ] || PG_CONF=$( grep ${USER} /etc/passwd | cut -d: -f6 )/$_C
if [ ! -r ${PG_CONF} ] || [ ! -f ${PG_CONF} ]; then
    PG_ID=$PG_OLD
    [ ${_TERM} = "YES" ] && echo "Cannot deal with specified config"
    unset PG_HOME PG_OLD PG_OLD_BASE PG_OLD_HOME _TERM _TRACE
    set +o xtrace
    return 1
fi
: Locating PGDATA
_D=$( __get_conf_val ${PG_CONF} data_directory )
[ "x${_D}" = "x" ] && _D=${PG_CONF%/*}
PG_DATA=$_D

PG_CONNINFO="$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f5 )"
PG_MASTER=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f6 )
PG_ADMINS=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f7 )
# {{{  Display a hint for the Standby
if [ "x${PG_MASTER}" = "x" ]; then
    PG_TITLE="${PG_ID}@${PG_HOST}"
else
    PG_TITLE="Standby for ${PG_MASTER}"

    if [ "${_TERM:-""}" = "YES" ]; then
        echo
        echo
        echo "#  ----   S T A N D B Y   F A I L O V E R   ----"
        echo
        echo "To activate Standby, use any of the following:"
        echo "1) pg_ctl promote"
        echo "2) touch ${PG_BASE}/tmp/activate_${PG_ID}"
        echo
    fi
fi
# }}}
PG_AUTOSTART=$( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" | cut -d: -f8 )
OFS=$IFS
if [ "${SHELL##*/}" = "ksh" ]; then
    IFS=: set -A PGENV $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" )
else
    IFS=: PGENV=( $( grep -vE "^#|^[ \t]*\$" "${_TAB}" | grep "^$PG_ID:" ) )
fi
IFS=$OFS

export PG_ID=${PG_ID}
PG_LOG=${PG_BASE}/log/${PG_ID}
PG_WAL=${PG_BASE}/wal/${PG_ID}
PG_ARCH=${PG_BASE}/arch/${PG_ID}
if [ ! -s $PG_DATA/postgresql.conf ]; then
    unset PGPORT
else
    PGPORT=$( grep "^#*port" $PG_DATA/postgresql.conf | sed -e 's/^#*//' -e 's/#.*$//' | gawk -F= '{gsub(/[ \t]/, "", $2); print $2}' )
fi
PG_VERSION=$( $PG_HOME/bin/initdb --version | gawk '{ print $NF}' )
PG_MAJOR=$( echo ${PG_VERSION} | sed -e 's/\(\.[^.]*\)\..*$/\1/' )

PGDATA=${PG_DATA}
# }}}
# {{{  -- Put new PG_ID into PATH and reset other vars --
PG_BIN="${PG_HOME}/bin"
if [ -d "${PG_BIN}" ]; then
    case "$PATH" in
      *${PG_OLD_HOME}/bin*) PATH=`echo ${PATH} | sed "s;${PG_OLD_HOME}/bin;${PG_BIN};g"` ;;
      *${PG_BIN}*) ;;
      *:) PATH=${PATH}${PG_BIN} ;;
      "") PATH=${PG_BIN} ;;
      *) PATH=${PATH}:${PG_BIN} ;;
    esac
fi
# }}}
#[ ${_TERM} = "YES" ] && echo "Cluster set to ${PG_ID} with base at $PG_BASE"
unset PG_OLD PG_NEW PG_OLD_HOME PG_OLD_BASE _TERM _TRACE PG_BIN
set +o allexport
set +o xtrace

#
# vim:ts=4 et sw=4 ai
#
